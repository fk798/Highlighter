{"ast":null,"code":"var _jsxFileName = \"/Users/faisalkarim/Desktop/hackathons/gpt-notes/notes-app/src/components/TextBox/TextBox.tsx\",\n  _s = $RefreshSig$();\n//import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextBox() {\n  _s();\n  const myColors = [\"purple\", \"#785412\", \"#452632\", \"#856325\", \"#963254\", \"#254563\", \"white\"];\n  const modules = {\n    toolbar: [[{\n      header: [1, 2, 3, 4, 5, 6, false]\n    }], [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], [{\n      align: [\"right\", \"center\", \"justify\"]\n    }], [{\n      list: \"ordered\"\n    }, {\n      list: \"bullet\"\n    }], [\"link\", \"image\"], [{\n      color: myColors\n    }], [{\n      background: myColors\n    }]]\n  };\n  const formats = [\"header\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"list\", \"bullet\", \"link\", \"color\", \"image\", \"background\", \"align\", \"code-block\"];\n  const [code, setCode] = useState(\"\");\n  const handleProcedureContentChange = content => {\n    setCode(content);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(code), /*#__PURE__*/_jsxDEV(ReactQuill, {\n      theme: \"snow\",\n      placeholder: \"Begin composing your notes here!\",\n      modules: modules,\n      formats: formats,\n      value: code,\n      onChange: handleProcedureContentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TextBox, \"IyWYJSZmPOQ025EjfLsvo6LmHmg=\");\n_c = TextBox;\nvar _c;\n$RefreshReg$(_c, \"TextBox\");","map":{"version":3,"names":["React","useState","ReactQuill","jsxDEV","_jsxDEV","Fragment","_Fragment","TextBox","_s","myColors","modules","toolbar","header","align","list","color","background","formats","code","setCode","handleProcedureContentChange","content","children","console","log","theme","placeholder","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/faisalkarim/Desktop/hackathons/gpt-notes/notes-app/src/components/TextBox/TextBox.tsx"],"sourcesContent":["//import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\n\nimport \"react-quill/dist/quill.snow.css\";\n\nexport default function TextBox() {\n  const myColors = [\n    \"purple\",\n    \"#785412\",\n    \"#452632\",\n    \"#856325\",\n    \"#963254\",\n    \"#254563\",\n    \"white\"\n  ];\n  const modules = {\n    toolbar: [\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\n      [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n      [{ align: [\"right\", \"center\", \"justify\"] }],\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\n      [\"link\", \"image\"],\n      [{ color: myColors }],\n      [{ background: myColors }]\n    ]\n  };\n\n  const formats = [\n    \"header\",\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"strike\",\n    \"blockquote\",\n    \"list\",\n    \"bullet\",\n    \"link\",\n    \"color\",\n    \"image\",\n    \"background\",\n    \"align\",\n    \"code-block\"\n  ];\n\n  const [code, setCode] = useState(\"\");\n  const handleProcedureContentChange = (content: any) => {\n    setCode(content);\n  };\n  return (\n    <>\n      {console.log(code)}\n      <ReactQuill\n        theme=\"snow\"\n        placeholder= \"Begin composing your notes here!\"\n        modules={modules}\n        formats={formats}\n        value={code}\n        onChange={handleProcedureContentChange}\n      />\n    </>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,aAAa;AAEpC,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzC,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAG,CACf,QAAQ,EACR,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,OAAO,CACR;EACD,MAAMC,OAAO,GAAG;IACdC,OAAO,EAAE,CACP,CAAC;MAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK;IAAE,CAAC,CAAC,EACvC,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,EACvD,CAAC;MAAEC,KAAK,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS;IAAE,CAAC,CAAC,EAC3C,CAAC;MAAEC,IAAI,EAAE;IAAU,CAAC,EAAE;MAAEA,IAAI,EAAE;IAAS,CAAC,CAAC,EACzC,CAAC,MAAM,EAAE,OAAO,CAAC,EACjB,CAAC;MAAEC,KAAK,EAAEN;IAAS,CAAC,CAAC,EACrB,CAAC;MAAEO,UAAU,EAAEP;IAAS,CAAC,CAAC;EAE9B,CAAC;EAED,MAAMQ,OAAO,GAAG,CACd,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,WAAW,EACX,QAAQ,EACR,YAAY,EACZ,MAAM,EACN,QAAQ,EACR,MAAM,EACN,OAAO,EACP,OAAO,EACP,YAAY,EACZ,OAAO,EACP,YAAY,CACb;EAED,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMmB,4BAA4B,GAAIC,OAAY,IAAK;IACrDF,OAAO,CAACE,OAAO,CAAC;EAClB,CAAC;EACD,oBACEjB,OAAA,CAAAE,SAAA;IAAAgB,QAAA,GACGC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC,eAClBd,OAAA,CAACF,UAAU;MACTuB,KAAK,EAAC,MAAM;MACZC,WAAW,EAAE,kCAAkC;MAC/ChB,OAAO,EAAEA,OAAQ;MACjBO,OAAO,EAAEA,OAAQ;MACjBU,KAAK,EAAET,IAAK;MACZU,QAAQ,EAAER;IAA6B;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA,eACF,CAAC;AAEP;AAACxB,EAAA,CAxDuBD,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}