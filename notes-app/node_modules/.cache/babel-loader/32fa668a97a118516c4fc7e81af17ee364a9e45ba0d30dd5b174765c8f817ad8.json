{"ast":null,"code":"var _jsxFileName = \"/Users/faisalkarim/Desktop/hackathons/gpt-notes/notes-app/src/components/TextBox/TextBox.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MyCustomButton = ({\n  editor\n}) => {\n  const handleClick = () => {\n    editor.insertContent('Hello World!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    children: \"My Button\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = MyCustomButton;\nexport default function TextBox() {\n  _s();\n  const editorRef = useRef(null);\n  const log = () => {\n    if (editorRef.current) {\n      console.log(editorRef.current.getContent());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Editor, {\n      apiKey: \"7c0izecivr1lps70wenvvlpyffvpawkgcjjy7t0h7rlfjod4\",\n      onInit: (evt, editor) => editorRef.current = editor,\n      initialValue: \"<p>This is the initial content of the editor.</p>\",\n      init: {\n        height: 500,\n        menubar: false,\n        plugins: ['advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview', 'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'],\n        toolbar: 'undo redo | blocks | ' + 'bold italic forecolor | alignleft aligncenter ' + 'alignright alignjustify | bullist numlist outdent indent | ' + 'removeformat | help | myCustomButton',\n        content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: log,\n      children: \"Log editor content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TextBox, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n_c2 = TextBox;\n{/*setup: editor => {\n            editor.ui.registry.addButton('myCustomButton', {\n            text: 'My Button',\n            onAction: () => {\n              editor.insertContent('Hello World!');\n            }\n          });\n          }*/}\nvar _c, _c2;\n$RefreshReg$(_c, \"MyCustomButton\");\n$RefreshReg$(_c2, \"TextBox\");","map":{"version":3,"names":["React","useRef","Editor","jsxDEV","_jsxDEV","Fragment","_Fragment","MyCustomButton","editor","handleClick","insertContent","type","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","TextBox","_s","editorRef","log","current","console","getContent","apiKey","onInit","evt","initialValue","init","height","menubar","plugins","toolbar","content_style","_c2","$RefreshReg$"],"sources":["/Users/faisalkarim/Desktop/hackathons/gpt-notes/notes-app/src/components/TextBox/TextBox.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst MyCustomButton = ({ editor }) => {\n  const handleClick = () => {\n    editor.insertContent('Hello World!');\n  };\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      My Button\n    </button>\n  );\n};\n\nexport default function TextBox() {\n  const editorRef = useRef(null);\n  const log = () => {\n    if (editorRef.current) {\n      console.log(editorRef.current.getContent());\n    }\n  };\n  \n  return (\n    <>\n      <Editor\n        apiKey='7c0izecivr1lps70wenvvlpyffvpawkgcjjy7t0h7rlfjod4'\n        onInit={(evt, editor) => editorRef.current = editor}\n        initialValue=\"<p>This is the initial content of the editor.</p>\"\n        init={{\n          height: 500,\n          menubar: false,\n          plugins: [\n            'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',\n            'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',\n            'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'\n          ],\n          toolbar: 'undo redo | blocks | ' +\n            'bold italic forecolor | alignleft aligncenter ' +\n            'alignright alignjustify | bullist numlist outdent indent | ' +\n            'removeformat | help | myCustomButton',\n          content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n        }}\n      />\n      <button onClick={log}>Log editor content</button>\n    </>\n  );\n}\n\n{/*setup: editor => {\n            editor.ui.registry.addButton('myCustomButton', {\n            text: 'My Button',\n            onAction: () => {\n              editor.insertContent('Hello World!');\n            }\n          });\n          }*/}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,MAAM,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EACrC,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBD,MAAM,CAACE,aAAa,CAAC,cAAc,CAAC;EACtC,CAAC;EAED,oBACEN,OAAA;IAAQO,IAAI,EAAC,QAAQ;IAACC,OAAO,EAAEH,WAAY;IAAAI,QAAA,EAAC;EAE5C;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACC,EAAA,GAVIX,cAAc;AAYpB,eAAe,SAASY,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAMC,SAAS,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMqB,GAAG,GAAGA,CAAA,KAAM;IAChB,IAAID,SAAS,CAACE,OAAO,EAAE;MACrBC,OAAO,CAACF,GAAG,CAACD,SAAS,CAACE,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC;EAED,oBACErB,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBACET,OAAA,CAACF,MAAM;MACLwB,MAAM,EAAC,kDAAkD;MACzDC,MAAM,EAAEA,CAACC,GAAG,EAAEpB,MAAM,KAAKa,SAAS,CAACE,OAAO,GAAGf,MAAO;MACpDqB,YAAY,EAAC,mDAAmD;MAChEC,IAAI,EAAE;QACJC,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,CACP,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EACrE,QAAQ,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,EAC/D,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAChE;QACDC,OAAO,EAAE,uBAAuB,GAC9B,gDAAgD,GAChD,6DAA6D,GAC7D,sCAAsC;QACxCC,aAAa,EAAE;MACjB;IAAE;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACFb,OAAA;MAAQQ,OAAO,EAAEU,GAAI;MAAAT,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACjD,CAAC;AAEP;AAACG,EAAA,CAhCuBD,OAAO;AAAAiB,GAAA,GAAPjB,OAAO;AAkC/B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,aAPC;AAOa,IAAAD,EAAA,EAAAkB,GAAA;AAAAC,YAAA,CAAAnB,EAAA;AAAAmB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}